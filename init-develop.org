#+TITLE:   Dev Module
#+AUTHOR:  Daniel Newman
#+EMAIL:   dwnewman78@gmail.com
#+SETUPFILE: ~/deos/setupfiles/emacs.setup

#+begin_src emacs-lisp
(provide 'init-develop)
#+end_src

* Some handy config from [[https://github.com/dakrone/eos][Dakrone]]

#+begin_src emacs-lisp
(setq vc-handled-backends '(git svn))
#+end_src

#+begin_src emacs-lisp
  (use-package subword
    :diminish subword-mode)

(use-package log4j-mode
  :ensure t
  :init
  (add-hook #'log4j-mode-hook #'view-mode)
  (add-hook #'log4j-mode-hook #'read-only-mode)
  (add-hook #'log4j-mode-hook 'deos/turn-on-hl-line))
#+end_src

Highlights for the idle
#+begin_src emacs-lisp
(use-package idle-highlight-mode
  :ensure t
  :init
  (add-hook 'java-mode-hook #'idle-highlight-mode)
  (add-hook 'emacs-lisp-mode-hook #'idle-highlight-mode)
  (add-hook 'clojure-lisp-mode-hook #'idle-highlight-mode)
  :config
  (setq idle-highlight-idle-time 1.5))
#+end_src

Bring up the compilation buffer with =C-x c=

#+begin_src emacs-lisp
(defun deos/last-compilation-buffer ()
  "Display last compilation buffer in current window."
  (interactive)
  (if (buffer-live-p compilation-last-buffer)
      (set-window-buffer (get-buffer-window) compilation-last-buffer)
    (message "Last compilation buffer is killed.")))

(global-set-key (kbd "C-x c") #'deos/last-compilation-buffer)
#+end_src

Don't prompt for saving files before compilation
#+begin_src emacs-lisp
(setq compilation-ask-about-save nil)
#+end_src

Hideshow for folding

#+begin_src emacs-lisp
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
         ("C-\\" . hs-toggle-hiding)
         ("M-\\" . deos/hs-fold-show-only-methods)
         ("M-+" . hs-show-all))
  :init
  (add-hook #'prog-mode-hook #'hs-minor-mode)
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'hs-marker [16 48 112 240 112 48 16] nil nil 'center))
  (defface hs-face '((t (:background "#ff8")))
    "Face to hightlight the ... area of hidden regions"
    :group 'hideshow)
  (defface hs-fringe-face '((t (:foreground "#888")))
    "Face used to highlight the fringe on folded regions"
    :group 'hideshow)
  (setq hs-set-up-overlay
        (lambda (ov)
          (when (eq 'code (overlay-get ov 'hs))
            (let ((marker-string "*")
                  (display-string (format " ... " (count-lines (overlay-start ov)
                                                               (overlay-end ov)))))
              (put-text-property 0 1 'display
                                 (list 'right-fringe 'hs-marker 'hs-fringe-face)
                                 marker-string)
              (put-text-property 0 (length display-string)
                                 'face 'hs-face display-string)
              (overlay-put ov 'before-string marker-string)
              (overlay-put ov 'display display-string))))
        hs-isearch-open t)
  :diminish hs-minor-mode
  :config
  (defvar hs-special-modes-alist
    (mapcar 'purecopy
            '((c-mode "{" "}" "/[*/]" nil nil)
              (c++-mode "{" "}" "/[*/]" nil nil)
              (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
              (java-mode "{" "}" "/[*/]" nil nil)
              (js-mode "{" "}" "/[*/]" nil)
              (javascript-mode  "{" "}" "/[*/]" nil))))

  (defvar deos/hs-level 2
    "Default level to hide at when calling
    `deos/fold-show-only-methods'. This is buffers may set this to
    be buffer-local.")

  (setq deos/hs-fold-show-only-methods-active-p nil)
  (defun deos/hs-fold-show-only-methods ()
    "Toggle between hiding all methods using `deos/hs-level' or
showing them."
    (interactive)
    (save-excursion
      (if deos/hs-fold-show-only-methods-active-p
          (progn
            (hs-show-all)
            (setq-local deos/hs-fold-show-only-methods-active-p nil))
        (progn
          (goto-char (point-min))
          (hs-hide-level deos/hs-level)
          (setq-local deos/hs-fold-show-only-methods-active-p t))))))
#+end_src

Auto revert the buffer if the file is changed on disk

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Uses =M-n= and =M-p= to jump between the same variables in multiple places

#+begin_src emacs-lisp
(use-package smartscan
  :ensure t
  :init (add-hook #'prog-mode-hook #'smartscan-mode)
  :config
  (bind-key "M-'" #'other-window smartscan-map)
  (setq smartscan-symbol-selector "symbol"))
#+end_src

Flip them bools

#+begin_src emacs-lisp
    (use-package bool-flip
      :ensure t
      :bind ("C-c C-b" . bool-flip-do-flip))
#+end_src

Navigate between functions declarations with =C-c C-p= and =C-c C-n=

#+begin_src emacs-lisp
(defun deos/previous-function ()
  (interactive)
  (beginning-of-defun))

(defun deos/next-function ()
  (interactive)
  (beginning-of-defun -1))

(bind-key "C-c C-p" 'deos/previous-function prog-mode-map)
(bind-key "C-c C-n" 'deos/next-function prog-mode-map)

;; cc-mode likes to have its own things, so bind them there too
;;(bind-key "C-c C-p" 'deos/previous-function c-mode-base-map)
;;(bind-key "C-c C-n" 'deos/next-function c-mode-base-map)
#+end_src

Navi mode does something similar
#+begin_src emacs-lisp
(defvar outline-minor-mode-prefix "\M-#")

(use-package navi-mode
  :ensure t
  :init
  (require 'outshine)
  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  (add-hook 'clojure-mode-hook 'outline-minor-mode))
#+end_src

Indention (just do it right)

#+begin_src emacs-lisp
(use-package dtrt-indent
  :ensure t
  :diminish t
  :config
  (setq dtrt-indent-active-mode-line-info ""))
#+end_src

Highlight a bunch of stuff

#+begin_src emacs-lisp
(use-package highlight-numbers
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'highlight-numbers-mode))

(use-package highlight-quoted
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'highlight-quoted-mode))

(use-package highlight-defined
  :ensure t
  :init
  (add-hook 'emacs-lisp-hook #'highlight-defined-mode))

(use-package highlight-operators
  :ensure t
  :init
  (add-hook 'c-mode-common-hook #'highlight-operators-mode))

(use-package highlight-escape-sequences
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'hes-mode))
#+end_src

Trying out cedet again. Be sure to run make in the override/cedet directory
#+begin_src emacs-lisp
;; Use the full Java 1.5 grammar to parse Java files
(autoload 'wisent-java-default-setup "semantic/wisent/java"
  "Hook run to setup Semantic in `java-mode'." nil nil)

(defun deos/setup-semantic-mode ()
  (interactive)
  (use-package semantic
    :init
    (require 'semantic/wisent)
    (require 'semantic/wisent/java)
    (require 'semantic/wisent/java-wy)
    (require 'semantic/ia)
    (setq semantic-default-submodes
          '(;; Perform semantic actions during idle time
            global-semantic-idle-scheduler-mode
            ;; Use a database of parsed tags
            global-semanticdb-minor-mode
            ;; Decorate buffers with additional semantic information
            global-semantic-decoration-mode
            ;; Highlight the name of the function you're currently in
            global-semantic-highlight-func-mode
            ;; Generate a summary of the current tag when idle
            global-semantic-idle-summary-mode
            ;; Switch to recently changed tags with `semantic-mrub-switch-tags',
            ;; or `C-x B'
            global-semantic-mru-bookmark-mode))
    (semantic-mode t)
    ;; Fixing a bug in semantic, see #22287
    (defun semanticdb-save-all-db-idle ()
      "Save all semantic tag databases from idle time.
Exit the save between databases if there is user input."
      (semantic-safe "Auto-DB Save: %S"
        ;; FIXME: Use `while-no-input'?
        (save-mark-and-excursion ;; <-- added line
         (semantic-exit-on-input 'semanticdb-idle-save
           (mapc (lambda (db)
                   (semantic-throw-on-input 'semanticdb-idle-save)
                   (semanticdb-save-db db t))
                 semanticdb-database-list)))))))

(add-hook 'c-mode-hook #'deos/setup-semantic-mode)
(add-hook 'java-mode-hook #'deos/setup-semantic-mode)
(add-hook 'emacs-lisp-mode-hook #'semantic-mode)
#+end_src

Indenting

#+begin_src emacs-lisp
  (electric-indent-mode 1)

  ;; Ignore electric indentation for python and yaml
  (defun electric-indent-ignore-mode (char)
    "Ignore electric indentation for python-mode"
    (if (or (equal major-mode 'python-mode)
            (equal major-mode 'yaml-mode))
        'no-indent
      nil))
  (add-hook 'electric-indent-functions 'electric-indent-ignore-mode)

(electric-layout-mode 1)
#+end_src

Hightlight some keywords
#+begin_src emacs-lisp
(defun deos/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code TODO"
  (font-lock-add-keywords
   nil '(("\\<\\(TODO\\(?:(.*)\\)?:?\\)\\>"  1 'warning prepend)
         ("\\<\\(FIXME\\(?:(.*)\\)?:?\\)\\>" 1 'error prepend)
         ("\\<\\(NOCOMMIT\\(?:(.*)\\)?:?\\)\\>"  1 'error prepend))))

(add-hook 'prog-mode-hook #'deos/add-watchwords)
#+end_src

I use helm dash for all my helm dashing needs.

Make sure that you do M-x helm-dash-install-docset to install the correct docset(s).

I usually install Java_SE8, Emacs Lisp, and ElasticSearch. Then I use C-c D (‘D’
for Documentation) to activate it.

#+begin_src emacs-lisp
(use-package helm-dash
  :ensure t
  :bind (("C-c D" . helm-dash))
  :init
  (setq helm-dash-common-docsets '("ElasticSearch" "Java")
        helm-dash-min-length 1)
  :config
  (defun deos/use-java-docset ()
    (setq-local helm-dash-docsets '("Java")))
  (defun deos/use-groovy-docset ()
    (setq-local helm-dash-docsets '("Groovy")))
  (defun deos/use-elisp-docset ()
    (setq-local helm-dash-docsets '("Emacs Lisp")))
  (defun deos/use-haskel-docset ()
    (setq-local helm-dash-docsets '("Haskell")))
  (add-hook 'java-mode-hook #'deos/use-java-docset)
  (add-hook 'emacs-lisp-mode-hook #'deos/use-elisp-docset)
  (add-hook 'haskell-mode-hook #'deos/use-haskell-docset)
  (add-hook 'groovy-mode-hook #'deos/use-groovy-docset))

#+end_src

* Flycheck

#+begin_src emacs-lisp
(when (fboundp 'define-fringe-bitmap)
  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    [0 0 0 0 0 4 12 28 60 124 252 124 60 28 12 4 0 0 0 0]))

(use-package flycheck
  :ensure t
  :defer 5
  :bind (("M-g M-n" . flycheck-next-error)
         ("M-g M-p" . flycheck-previous-error)
         ("M-g M-=" . flycheck-list-errors))
  :init
  (require 'flycheck)
  (global-flycheck-mode)
  (setq flycheck-indication-mode 'right-fringe
        flycheck-check-syntax-automatically '(save mode-enabled))
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers
                  '(emacs-lisp-checkdoc json-jsonlint json-python-json))
    (use-package flycheck-pos-tip
      :ensure t
      :init
      (flycheck-pos-tip-mode)
      (setq flycheck-pos-tip-timeout 10
            flycheck-display-errors-delay 0.5))
    (use-package helm-flycheck
      :ensure t
      :init (define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
    (use-package flycheck-haskell
      :ensure t
      :init (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))))
#+end_src

* Yasnippets

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :bind (("M-=" . yas-insert-snippet))
  :diminish yas-minor-mode
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-reload-all))
#+end_src

* Compiling
This is interesting but I need to customize it for my environment
#+begin_src emacs-lisp
  (use-package multi-compile
    :ensure t
    :commands multi-compile-run
    :bind ("<f6>" . multi-compile-run)
    :init
    (defun eshell/comp ()
      "Run multi-compile from the directory you are currently located in"
      (multi-compile-run))
    :config
    (require 's)
    (setq multi-compile-completion-system 'helm
          multi-compile-alist
          '(;; Elasticsearch-specific compilation commands
            ((s-contains? "es/elasticsearch" default-directory)
             . (("ES core compile"
                 "gradle :core:compileJava :core:compileTestJava --console=plain"
                 "~/es/elasticsearch")
                ("ES everything compile"
                 "gradle compileJava compileTestJava precommit --console=plain"
                 "~/es/elasticsearch")
                ("ES core unit test"
                 "gradle :core:test --console=plain"
                 "~/es/elasticsearch")
                ("ES core integ test"
                 "gradle :core:integTest --console=plain"
                 "~/es/elasticsearch")
                ("ES core check"
                 "gradle :core:check --console=plain"
                 "~/es/elasticsearch")
                ("ES documentation tests"
                 "gradle :docs:check --console=plain"
                 "~/es/elasticsearch")
                ("ES REST tests"
                 "gradle :distribution:integ-test-zip:integTest -Dtests.class=\"org.elasticsearch.test.rest.*Yaml*IT\" --console=plain"
                 "~/es/elasticsearch")
                ("ES precommit"
                 "gradle precommit --console=plain"
                 "~/es/elasticsearch")
                ("ES qa check"
                 "gradle check --console=plain"
                 "~/es/elasticsearch/qa")
                ("ES check all"
                 "gradle check --console=plain"
                 "~/es/elasticsearch")))
            ;; X-pack specific compilation commands
            ((s-contains? "elasticsearch-extra/x-pack" default-directory)
             . (("x-pack compile" .
                 "gradle :x-pack:elasticsearch:x-pack:compileJava :x-pack:elasticsearch:x-pack:compileTestJava --console=plain")
                ("x-pack everything compile" .
                 "gradle compileJava compileTestJava precommit --console=plain")
                ("x-pack precommit" .
                 "gradle precommit --console=plain")
                ("x-pack check"
                 "gradle check --console=plain"
                 "~/es/elasticsearch-extra/x-pack-elasticsearch")))
            ;; Java compilation commands
            (java-mode
             . (("ant compile" .
                 "ant compile compile-test")
                ("mvn compile" .
                 "mvn compile test-compile")
                ("gradle compile" .
                 "gradle compileJava compileTestJava --console=plain"))))))

(add-hook 'compilation-mode-hook #'toggle-truncate-lines)
#+end_src

Determine the test at point and copy the syntax for it
#+begin_src emacs-lisp
(defun deos/test-at-point ()
  (interactive)
  (if (not (eq major-mode 'java-mode))
      (message "Buffer is not currently in java-mode")
    "foo"))
#+end_src

* Paredit

Paredit is great for editing anything requiring closures

#+begin_src emacs-lisp
    (use-package paredit
      :ensure t
      :commands paredit-mode
      :diminish "()"
      :init
      (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
      (add-hook 'ielm-mode-hook #'paredit-mode)
      :config
      (bind-key "M-)" #'paredit-forward-slurp-sexp paredit-mode-map)
      (bind-key "C-(" #'paredit-forward-barf-sexp paredit-mode-map)
      (bind-key "C-)" #'paredit-forward-slurp-sexp paredit-mode-map)
      (bind-key ")" #'paredit-close-parenthesis paredit-mode-map)
      (bind-key "M-\"" #'deos/other-window-backwards paredit-mode-map)
      (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
      )
#+end_src

Also turn it on everywhere

#+begin_src emacs-lisp
  (eval-after-load 'paredit-everywhere
    '(define-key paredit-everywhere-mode-map (kbd "M-s") nil))

(use-package paredit-everywhere
  :ensure t
  :disabled t
  :init (add-hook 'prog-mode-hook 'paredit-everywhere-mode))
#+end_src

* Parentheses matching for fun and profit

Insert pairs of characters
#+begin_src emacs-lisp
(electric-pair-mode -1)
(setq electric-pair-preserve-balance t
      electric-pair-delete-adjacent-pairs t
      electric-pair-open-newline-between-pairs nil)
(show-paren-mode 1)
#+end_src

And now for smart parentheses handling
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :init
  (electric-pair-mode -1)
  (require 'smartparens-config)
  ;; Turn on smartparens in the minibuffer
  (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode)
  (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

  (define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-sexp)
  (define-key smartparens-mode-map (kbd "M-F") 'sp-forward-sexp)
  (define-key smartparens-mode-map (kbd "M-B") 'sp-backward-sexp)

  (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
  (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
  (define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
  (define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)

  (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
  (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

  (define-key smartparens-mode-map (kbd "C-M-n") 'sp-next-sexp)
  (define-key smartparens-mode-map (kbd "C-M-p") 'sp-previous-sexp)

  (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
  (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

  (define-key smartparens-mode-map (kbd "M-r") 'sp-unwrap-sexp)

  (define-key smartparens-mode-map (kbd "C-(") 'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "C-)") 'sp-forward-slurp-sexp)
  (define-key smartparens-mode-map (kbd "M-(") 'sp-forward-barf-sexp)
  (define-key smartparens-mode-map (kbd "M-)") 'sp-forward-slurp-sexp)

  (define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)

  ;; Handle backspace in c-like modes better for smartparens
  (bind-key [remap c-electric-backspace]
            'sp-backward-delete-char smartparens-strict-mode-map)

  ;; ;; Bind ";" to sp-comment in elisp
  (bind-key ";" 'sp-comment emacs-lisp-mode-map)

  (defun sp--org-skip-asterisk (ms mb me)
    (or (and (= (line-beginning-position) mb)
             (eq 32 (char-after (1+ mb))))
        (and (= (1+ (line-beginning-position)) me)
             (eq 32 (char-after me)))))

  ;; Org-mode
  (sp-with-modes
      'org-mode
    (sp-local-pair "*" "*"
                   :actions '(insert wrap)
                   :unless '(sp-point-after-word-p sp-point-at-bol-p)
                   :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
    (sp-local-pair "_" "_" :unless '(sp-point-after-word-p) :wrap "C-_")
    (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "«" "»"))

    ;;; Java
  (sp-with-modes
      '(java-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))

  (smartparens-global-strict-mode 1))
#+end_src
