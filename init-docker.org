#+TITLE: Docker
#+AUTHOR: Daniel Newman
#+EMAIL: dwnewman78@gmail.com
#+SETUPFILE: ~/deos/setupfiles/emacs.setup

| *Author* | {{{author}}} ({{{email}}})    |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |

* Introduction
Hopefully I'll be able to do all things docker within Emacs

* Docker
Trying out this docker package for managing docker containers  https://github.com/Silex/docker.el
 #+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t)
#+END_SRC

* Editing Docker Files
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
  :ensure t)
(use-package dockerfile-mode
  :ensure t)
#+END_SRC

* Connecting to docker and vagrant with tramp
#+BEGIN_SRC emacs-lisp
(use-package helm-tramp
  :ensure t)
(push
 (cons
  "docker"
  '((tramp-login-program "docker")
    (tramp-login-args (("exec" "-it") ("%h") ("/bin/bash")))
    (tramp-remote-shell "/bin/sh")
    (tramp-remote-shell-args ("-i") ("-c"))))
 tramp-methods)

(defadvice tramp-completion-handle-file-name-all-completions
  (around dotemacs-completion-docker activate)
  "(tramp-completion-handle-file-name-all-completions \"\" \"/docker:\" returns
    a list of active Docker container names, followed by colons."
  (if (equal (ad-get-arg 1) "/docker:")
      (let* ((dockernames-raw (shell-command-to-string "docker ps | awk '$NF != \"NAMES\" { print $NF \":\" }'"))
             (dockernames (cl-remove-if-not
                           #'(lambda (dockerline) (string-match ":$" dockerline))
                           (split-string dockernames-raw "\n"))))
        (setq ad-return-value dockernames))
    ad-do-it))
#+END_SRC
* Making package importable
#+BEGIN_SRC emacs-lisp
(provide 'init-docker)
#+END_SRC
