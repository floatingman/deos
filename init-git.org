#+TITLE: Git
#+AUTHOR: Daniel Newman
#+EMAIL: dwnewman78@gmail.com
#+SETUPFILE: ~/deos/setupfiles/emacs.setup

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :init (add-hook 'magit-mode-hook 'deos/turn-on-hl-line)
    :config
    (setq git-commit-summary-max-length 70)
    (setenv "GIT_PAGER" "")
    (if (file-exists-p "/usr/local/bin/emacsclient")
        (setq magit-emacsclient-executable (executable-find "emacsclient")))
    (defun deos/magit-browse ()
      "Browse to the project's github URL, if available"
      (interactive)
      (let ((url (with-temp-buffer
                            (unless (zerop (call-process-shell-command
                                            "git remote -v" nil t))
                              (error "Failed: 'git remote -v'"))
                            (goto-char (point-min))
                            (when (re-search-forward
                                   "github\\.com[:/]\\(.+?\\)\\.git" nil t)
                              (format "https://github.com/%s" (match-string 1))))))
        (unless url
          (error "Can't find repository URL"))
        (browse-url url)))

  (define-key magit-mode-map (kbd "C-c C-b") #'deos/magit-browse)
  ;; Magit has its own binding, so re-bind them
  (bind-key "M-1" #'deos/create-or-switch-to-eshell-1 magit-mode-map)
  (bind-key "M-2" #'deos/create-or-switch-to-eshell-2 magit-mode-map)
  (bind-key "M-3" #'deos/create-or-switch-to-eshell-3 magit-mode-map)
  (bind-key "M-4" #'deos/create-or-switch-to-eshell-4 magit-mode-map)

  ;; Allow gpg signing merge commits
  (magit-define-popup-option 'magit-merge-popup
                             ?S "Sign using gpg" "--gpg-sign="
                             #'magit-read-gpg-secret-key))

  (use-package magit-gh-pulls
   :ensure t
   :init
   (add-hook 'magit-mode-hook #'turn-on-magit-gh-pulls)
   :config
   ;; work around https://github.com/sigma/magit-gh-pulls/issues/83
   (setq magit-gh-pulls-pull-detail-limit 50))

  (use-package magithub
  :ensure t
  :disabled t
  :after magit
  :config
  (magithub-feature-autoinject t)

  ;; Workaround for https://github.com/vermiculus/magithub/issues/71
  (defun magithub-issue--sort (issues)
    "Sort ISSUES by issue number."
    (sort issues
          (lambda (a b) (> (plist-get a :number)
                      (plist-get b :number))))))

  (use-package git-gutter
  :ensure t
  :when window-system
  :defer t
  :bind (("C-x P" . git-gutter:popup-hunk)
         ("C-x p" . git-gutter:previous-hunk)
         ("C-x n" . git-gutter:next-hunk)
         ("C-c G" . git-gutter:popup-hunk))
  :diminish ""
  :init
  (add-hook 'prog-mode-hook #'git-gutter-mode)
  (add-hook 'text-mode-hook #'git-gutter-mode)
  :config
  (use-package git-gutter-fringe
    :ensure t
    :init
    (require 'git-gutter-fringe)
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'git-gutter-fr:added
        [224 224 224 224 224 224 224 224 224 224 224 224 224
             224 224 224 224 224 224 224 224 224 224 224 224]
        nil nil 'center)
      (define-fringe-bitmap 'git-gutter-fr:modified
        [224 224 224 224 224 224 224 224 224 224 224 224 224
             224 224 224 224 224 224 224 224 224 224 224 224]
        nil nil 'center)
      (define-fringe-bitmap 'git-gutter-fr:deleted
        [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
        nil nil 'center))))

  (use-package git-messenger
  :ensure t
  :commands git-messenger:popup-message
  :bind (("C-c M" . git-messenger:popup-message))
  :config
  (setq git-messenger:show-detail t))

  (use-package browse-at-remote
  :ensure t
  :commands browse-at-remote
  :bind ("C-c g g" . browse-at-remote))

  (use-package git-timemachine
  :ensure t)

  (use-package git-annex
  :ensure t)

  (use-package magit-annex
  :ensure t)

  (use-package ediff
  :init
  (setq
   ;; Always split nicely for wide screens
   ediff-split-window-function 'split-window-horizontally)
  (defun ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff
     ediff-current-difference nil 'C nil
     (concat
      (ediff-get-region-contents
       ediff-current-difference 'A ediff-control-buffer)
      (ediff-get-region-contents
       ediff-current-difference 'B ediff-control-buffer))))
  (defun add-d-to-ediff-mode-map ()
    (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
  (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map))

  (defhydra deos/hydra-smerge
  (:color red :hint nil
          :pre (smerge-mode 1))
  "
^Move^ ^Keep^ ^Diff^ ^Pair^
------------------------------------------------------
_n_ext _b_ase _R_efine _<_: base-mine
_p_rev _m_ine _E_diff _=_: mine-other
^ ^ _o_ther _C_ombine _>_: base-other
^ ^ _a_ll _r_esolve
_q_uit _RET_: current
"
  ("RET" smerge-keep-current)
  ("C" smerge-combine-with-next)
  ("E" smerge-ediff)
  ("R" smerge-refine)
  ("a" smerge-keep-all)
  ("b" smerge-keep-base)
  ("m" smerge-keep-mine)
  ("n" smerge-next)
  ("o" smerge-keep-other)
  ("p" smerge-prev)
  ("r" smerge-resolve)
  ("<" smerge-diff-base-mine)
  ("=" smerge-diff-mine-other)
  (">" smerge-diff-base-other)
  ("q" nil :color blue))

  (provide 'init-git)

#+END_SRC
