#+TITLE:   Java Dev Module
#+AUTHOR:  Daniel Newman
#+EMAIL:   dwnewman78@gmail.com
#+SETUPFILES: ~/deos/setupfiles/deos.setup

#+begin_src emacs-lisp :tangle yes
(provide 'init-java)
#+end_src

* Groovy
#+begin_src emacs-lisp :tangle yes
(use-package groovy-mode
  :ensure t)
#+end_src

* Java development config copied from [[https://github.com/dakrone/eos][Dakrone]]

First decide on which ide to use meghanada or eclim
#+begin_src emacs-lisp :tangle yes
(setq deos/use-meghanada t)
(setq deos/use-eclim nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; via http://emacs.stackexchange.com/questions/17327/how-to-have-c-offset-style-correctly-detect-a-java-constructor-and-change-indent
(defun my/point-in-defun-declaration-p ()
  (let ((bod (save-excursion (c-beginning-of-defun)
                             (point))))
    (<= bod
        (point)
        (save-excursion (goto-char bod)
                        (re-search-forward "{")
                        (point)))))

(defun my/is-string-concatenation-p ()
  "Returns true if the previous line is a string concatenation"
  (save-excursion
    (let ((start (point)))
      (forward-line -1)
      (if (re-search-forward " \\\+$" start t) t nil))))

(defun my/inside-java-lambda-p ()
  "Returns true if point is the first statement inside of a lambda"
  (save-excursion
    (c-beginning-of-statement-1)
    (let ((start (point)))
      (forward-line -1)
      (if (search-forward " -> {" start t) t nil))))

(defun my/trailing-paren-p ()
  "Returns true if point is a training paren and semicolon"
  (save-excursion
    (end-of-line)
    (let ((endpoint (point)))
      (beginning-of-line)
      (if (re-search-forward "[ ]*);$" endpoint t) t nil))))

(defun my/prev-line-call-with-no-args-p ()
  "Return true if the previous line is a function call with no arguments"
  (save-excursion
    (let ((start (point)))
      (forward-line -1)
      (if (re-search-forward ".($" start t) t nil))))

(defun my/arglist-cont-nonempty-indentation (arg)
  (if (my/inside-java-lambda-p)
      '+
    (if (my/is-string-concatenation-p)
        16 ;; TODO don't hard-code
      (unless (my/point-in-defun-declaration-p) '++))))

(defun my/statement-block-intro (arg)
  (if (and (c-at-statement-start-p) (my/inside-java-lambda-p)) 0 '+))

(defun my/block-close (arg)
  (if (my/inside-java-lambda-p) '- 0))

(defun my/arglist-close (arg) (if (my/trailing-paren-p) 0 '--))

(defun my/arglist-intro (arg)
  (if (my/prev-line-call-with-no-args-p) '++ 0))

(defconst intellij-java-style
  '((c-basic-offset . 4)
    (c-comment-only-line-offset . (0 . 0))
    ;; the following preserves Javadoc starter lines
    (c-offsets-alist
     .
     ((inline-open . 0)
      (topmost-intro-cont    . +)
      (statement-block-intro . my/statement-block-intro)
      (block-close           . my/block-close)
      (knr-argdecl-intro     . +)
      (substatement-open     . +)
      (substatement-label    . +)
      (case-label            . +)
      (label                 . +)
      (statement-case-open   . +)
      (statement-cont        . +)
      (arglist-intro         . my/arglist-intro)
      (arglist-cont-nonempty . (my/arglist-cont-nonempty-indentation c-lineup-arglist))
      (arglist-close         . my/arglist-close)
      (inexpr-class          . 0)
      (access-label          . 0)
      (inher-intro           . ++)
      (inher-cont            . ++)
      (brace-list-intro      . +)
      (func-decl-cont        . ++))))
  "Elasticsearch's Intellij Java Programming Style")

(c-add-style "intellij" intellij-java-style)
(customize-set-variable 'c-default-style
                        '((java-mode . "intellij")
                          (awk-mode . "awk")
                          (other . "gnu")))

;; Used for deos/setup-java
(use-package shut-up :ensure t)

(defun deos/setup-java ()
  (interactive)
  (define-key java-mode-map (kbd "M-,") 'pop-tag-mark)
  (define-key java-mode-map (kbd "C-c M-i") 'java-imports-add-import-dwim)
  (c-set-style "intellij" t)
  (subword-mode 1)
  (shut-up (toggle-truncate-lines 1))
  ;; Generic java stuff things
  (setq-local fci-rule-column 99)
  (setq-local fill-column 100)
  (when (fboundp 'deos/turn-on-whitespace-mode)
    (whitespace-mode -1)
    (deos/turn-on-whitespace-mode))
  ;; hide the initial comment in the file (usually a license) if hs-minor-mode
  ;; is enabled
  (when (boundp' hs-minor-mode)
    (hs-hide-initial-comment-block)))

(add-hook 'java-mode-hook #'deos/setup-java)

;; Make emacs' compile recognize broken gradle output
(require 'compile)
(add-to-list 'compilation-error-regexp-alist
             '("^:[^/.\n]+\\(/.+\\):\\([[:digit:]]+\\):" 1 2))
#+end_src

Managing imports

#+begin_src emacs-lisp :tangle yes
(use-package java-imports
  :ensure t
  :config
  ;; Elasticsearch's import style
  (setq java-imports-find-block-function 'java-imports-find-place-sorted-block)
  (add-hook 'java-mode-hook 'java-imports-scan-file))
#+end_src

* Eclim
#+begin_src emacs-lisp :tangle yes
(use-package eclim
  :ensure t
  :disabled t
  :init
  ;; only show errors
  (setq-default eclim--problems-filter "e")
  (when deos/use-eclim
    (add-hook 'java-mode-hook #'eclim-mode)
    (use-package company-emacs-eclim
      :ensure t
      :init (company-emacs-eclim-setup))))
#+end_src

* SDKMan
This will have to be downloaded from http://sdkman.io, there is no package for it

Let's also add it to the tramp remote path

#+begin_src emacs-lisp :tangle yes
(add-to-list 'tramp-remote-path "~/.sdkman/candidates/gradle/current/bin")
(add-to-list 'tramp-remote-path "~/.sdkman/candidates/groovy/current/bin")
#+end_src

* Configure GNU Global and Gtags

See: https://github.com/leoliu/ggtags

If on OSX, you'll need to:

: brew install ctags
: wget -c http://tamacom.com/global/global-6.3.1.tar.gz
: tar zxvf global-6.3.1.tar.gz
: cd global-6.3.1
: ./configure --prefix=/usr/local --with-exuberant-ctags=/usr/local/bin/ctags
: make install

I also add this to my shell configuration:

: export GTAGSCONF=/usr/local/share/gtags/gtags.conf
: export GTAGSLABEL=ctags

I actually choose to do this because the fedora/debian/ubuntu version of
=global= is so old it doesn't work well.

#+begin_src emacs-lisp :tangle yes
(defun deos/setup-helm-gtags ()
  (interactive)
  ;; this variables must be set before load helm-gtags
  ;; you can change to any prefix key of your choice
  (setq helm-gtags-prefix-key "\C-cg")
  (setq helm-gtags-ignore-case t
        helm-gtags-auto-update t
        helm-gtags-use-input-at-cursor t
        helm-gtags-pulse-at-cursor t
        helm-gtags-suggested-key-mapping t)
  (use-package helm-gtags
    :ensure t
    :init (helm-gtags-mode t)
    :diminish "")
  ;; key bindings
  (define-key helm-gtags-mode-map (kbd "M-S") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))

(defun deos/setup-ggtags ()
  (interactive)
  (ggtags-mode 1)
  ;; turn on eldoc with ggtags
  (setq-local eldoc-documentation-function #'ggtags-eldoc-function)
  ;; add ggtags to the hippie completion
  (setq-local hippie-expand-try-functions-list
              (cons 'ggtags-try-complete-tag
                    hippie-expand-try-functions-list))
  ;; use helm for completion
  (setq ggtags-completing-read-function nil))

(use-package ggtags
  :ensure t
  :defer t
  :init
  (progn
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                  (deos/setup-semantic-mode)
                  ;; helm-gtags
                  (deos/setup-helm-gtags)
                  ;; regular gtags
                  ;;(my/setup-ggtags)
                  )))))
#+end_src

* Connecting to a Java debugger
:PROPERTIES:
:CUSTOM_ID: h:7daa814f-0c94-45e4-9864-b5d3c8227251
:END:

Strangely enough (I didn't think it would actually exist), there does exist a
command-line debugger for Java, called =jdb=. Even better, there's a packaged
called "Realgud" that combines a bunch of different debuggers and the plumbing
to hook them up to Emacs. So I'll install that.

For [[https://github.com/elastic/elasticsearch][Elasticsearch]] in particular, this means running =gradle run --debug-jvm=
which starts up ES listening for events, and then =M-x realgud:jdb= and using
=jdb -attach 8000= to attach to the JVM.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package realgud
  :ensure t)
#+END_SRC

* Java development with meghanada
:PROPERTIES:
:CUSTOM_ID: h:cfc790e0-9777-4cf1-a60d-25b0e9449462
:END:

[[https://github.com/mopemope/meghanada-emacs][Meghanada-mode]] is a new Java development mode that is supposed to be under
active development, so I'm trying it out.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package meghanada
  :ensure t
  :init
  ;; Don't auto-start
  (setq meghanada-auto-start nil)
  (when deos/use-meghanada
    (add-hook 'java-mode-hook #'meghanada-mode)
    (add-hook 'java-mode-hook 'flycheck-mode)
    (bind-key "C-c M-." 'meghanada-jump-declaration java-mode-map)))
#+END_SRC
